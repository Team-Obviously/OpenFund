"use strict";
/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.b = exports.BamlAsyncClient = void 0;
// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const baml_1 = require("@boundaryml/baml");
const globals_1 = require("./globals");
class BamlAsyncClient {
    constructor(runtime, ctx_manager) {
        this.runtime = runtime;
        this.ctx_manager = ctx_manager;
        this.stream_client = new BamlStreamClient(runtime, ctx_manager);
    }
    get stream() {
        return this.stream_client;
    }
    ExtractStakeComment(user_comment, __baml_options__) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                const raw = yield this.runtime.callFunction("ExtractStakeComment", {
                    "user_comment": user_comment
                }, this.ctx_manager.cloneContext(), (_a = __baml_options__ === null || __baml_options__ === void 0 ? void 0 : __baml_options__.tb) === null || _a === void 0 ? void 0 : _a.__tb(), __baml_options__ === null || __baml_options__ === void 0 ? void 0 : __baml_options__.clientRegistry);
                return raw.parsed();
            }
            catch (error) {
                const bamlError = (0, baml_1.createBamlValidationError)(error);
                if (bamlError instanceof baml_1.BamlValidationError) {
                    throw bamlError;
                }
                else {
                    throw error;
                }
            }
        });
    }
}
exports.BamlAsyncClient = BamlAsyncClient;
class BamlStreamClient {
    constructor(runtime, ctx_manager) {
        this.runtime = runtime;
        this.ctx_manager = ctx_manager;
    }
    ExtractStakeComment(user_comment, __baml_options__) {
        var _a, _b;
        try {
            const raw = this.runtime.streamFunction("ExtractStakeComment", {
                "user_comment": user_comment
            }, undefined, this.ctx_manager.cloneContext(), (_a = __baml_options__ === null || __baml_options__ === void 0 ? void 0 : __baml_options__.tb) === null || _a === void 0 ? void 0 : _a.__tb(), __baml_options__ === null || __baml_options__ === void 0 ? void 0 : __baml_options__.clientRegistry);
            return new baml_1.BamlStream(raw, (a) => a, (a) => a, this.ctx_manager.cloneContext(), (_b = __baml_options__ === null || __baml_options__ === void 0 ? void 0 : __baml_options__.tb) === null || _b === void 0 ? void 0 : _b.__tb());
        }
        catch (error) {
            if (error instanceof Error) {
                const bamlError = (0, baml_1.createBamlValidationError)(error);
                if (bamlError instanceof baml_1.BamlValidationError) {
                    throw bamlError;
                }
            }
            throw error;
        }
    }
}
exports.b = new BamlAsyncClient(globals_1.DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, globals_1.DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX);
//# sourceMappingURL=async_client.js.map